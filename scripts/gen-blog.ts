import { readFileSync, readdirSync, writeFileSync } from 'fs';
import { dirname, join } from 'path';
import { fileURLToPath } from 'url';

import matter from 'gray-matter';

import { type BlogPost } from '~/types/blog';

const __dirname = dirname(fileURLToPath(import.meta.url));
const contentDir = join(__dirname, '..', 'content', 'blog');
const genFile = join(__dirname, '..', 'src', 'data', 'blogPosts.gen.ts');

const posts = readdirSync(contentDir)
  .filter((file) => file.endsWith('.md'))
  .map((file) => {
    const content = readFileSync(join(contentDir, file), 'utf8');
    const { data, content: markdownContent } = matter(content);
    return {
      slug: file.replace('.md', ''),
      title: data.title || 'Untitled',
      date: data.date || '',
      description: data.description || '',
      content: markdownContent,
    };
  })
  .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());

const normalizedPosts = posts.reduce(
  (acc, post) => {
    acc[post.slug] = post;
    return acc;
  },
  {} as Record<string, BlogPost>
);

// Write TypeScript file
const tsContent = `// This file was automatically generated by scripts/gen-blog.ts.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { type BlogPost } from '~/types/blog';

export const blogPosts: Record<string, BlogPost> = ${JSON.stringify(normalizedPosts, null, 2)};
`;

writeFileSync(genFile, tsContent);
